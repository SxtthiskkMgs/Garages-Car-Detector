#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"  // Helper functions to debug token generation
#include "addons/RTDBHelper.h"   // Helper functions to debug Realtime Database

// Your Wi-Fi credentials
#define WIFI_SSID "1"
#define WIFI_PASSWORD "1"

// Your Firebase credentials
#define API_KEY "AIzaSyBmad6igY0ff-AaxxiP34TNfJTud2xHaDI"
#define DATABASE_URL "https://car-detection-20f39-default-rtdb.asia-southeast1.firebasedatabase.app/"

// Ultrasonic sensor pins
#define TRIG_PIN 2
#define ECHO_PIN 4

// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;

void setup() {
  Serial.begin(9600);
  delay(1000);

  // Initialize ultrasonic sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Connect to WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ");

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Set up Firebase configuration
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  // Sign up anonymously for Firebase authentication
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Sign-up successful.");
    signupOK = true;
  } else {
    Serial.printf("Sign-up error: %s\n", config.signer.signupError.message.c_str());
  }

  // Assign the callback function for token generation
  config.token_status_callback = tokenStatusCallback;  // Debug token generation

  // Initialize Firebase
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Check Firebase initialization status
  if (Firebase.ready()) {
    Serial.println("Firebase initialized successfully.");
  } else {
    Serial.println("Failed to initialize Firebase.");
    Serial.println(fbdo.errorReason());  // Print error reason
  }
}

void loop() {
  // Check WiFi status
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi connection lost, reconnecting...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    delay(5000);  // Wait for 5 seconds to reconnect
  }

  // Check Firebase status
  if (!Firebase.ready()) {
    Serial.println("Firebase not ready yet.");
    delay(2000);  // Wait before retrying
    return;
  }

  // Read distance from ultrasonic sensor
  long duration, distance;
  digitalWrite(TRIG_PIN, LOW);  // TRIG_PIN
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH);  // ECHO_PIN
  distance = (duration * 0.0343) / 2;

  // Print distance to Serial Monitor
  Serial.println("Distance: " + String(distance) + " cm");

  // Check distance and update Firebase based on availability
  String parkingStatus;
  
  if (distance > 100) {
    parkingStatus = "Parking available";
  } else {
    parkingStatus = "Parking unavailable";
  }

  // Send the parking status to Firebase
  if (Firebase.RTDB.setString(&fbdo, "/PARKING_STATUS", parkingStatus)) {
    Serial.println("Parking status updated: " + parkingStatus);
  } else {
    Serial.println("Failed to update parking status in Firebase.");
    Serial.println(fbdo.errorReason());  // Print error reason
  }

  delay(999);  // Wait for 1 seconds before the next reading
}
